name: CI/CD - Three Tier Application

on:
  push:
    branches:
      - "main"

jobs:
  build-and-deploy:
    name: Build & Push Docker Images to ECR
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2
      ECR_REGISTRY: 376885477991.dkr.ecr.us-east-2.amazonaws.com
      FRONTEND_IMAGE: three-tier-frontend
      BACKEND_IMAGE: three-tier-backend

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Frontend Image Build & Push
    - name: Build & Push Frontend Docker Image
      run: |
        cd Application-Code/frontend
        docker build -t $ECR_REGISTRY/$FRONTEND_IMAGE:latest .
        docker push $ECR_REGISTRY/$FRONTEND_IMAGE:latest

    # Backend Image Build & Push
    - name: Build & Push Backend Docker Image
      run: |
        cd Application-Code/backend
        docker build -t $ECR_REGISTRY/$BACKEND_IMAGE:latest .
        docker push $ECR_REGISTRY/$BACKEND_IMAGE:latest

deploy:
  name: Deploy Application to EC2
  runs-on: ubuntu-latest
  needs: build-and-deploy
  env:
    EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
    EC2_PRIVATE_KEY_CONTENT: ${{ secrets.EC2_PRIVATE_KEY_CONTENT }}

  steps:
  - name: Checkout source code
    uses: actions/checkout@v4

  - name: Set up SSH key
    run: |
      mkdir -p ~/.ssh
      echo "$EC2_PRIVATE_KEY_CONTENT" > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa

  - name: Deploy Frontend to EC2
    run: |
      ssh -i ~/.ssh/id_rsa ubuntu@$EC2_PUBLIC_IP "docker pull $ECR_REGISTRY/$FRONTEND_IMAGE:latest && docker run -d -p 80:80 $ECR_REGISTRY/$FRONTEND_IMAGE:latest"

  - name: Deploy Backend to EC2
    run: |
      ssh -i ~/.ssh/id_rsa ubuntu@$EC2_PUBLIC_IP "docker pull $ECR_REGISTRY/$BACKEND_IMAGE:latest && docker run -d -p 3000:3000 $ECR_REGISTRY/$BACKEND_IMAGE:latest"
